{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/josephhong/The%20Art%20of%20Optimism/affirmations-app/app/api/text-to-speech/route.js"],"sourcesContent":["// app/api/text-to-speech/route.js\nexport async function POST(req) {\n  const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY;\n  const VOICE_ID = process.env.ELEVENLABS_VOICE_ID || \"EXAVITQu4vr4xnSDxMaL\";\n  const url = `https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}`;\n\n  try {\n    const { text } = await req.json();\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        accept: \"audio/mpeg\",\n        \"xi-api-key\": ELEVENLABS_API_KEY,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        text,\n        model_id: \"eleven_monolingual_v1\",\n      }),\n    });\n\n    if (!response.ok) {\n      let errorMessage = \"Failed to generate speech.\";\n      try {\n        const errData = await response.json();\n        errorMessage = errData?.error?.message || errData?.message || errorMessage;\n      } catch (parseErr) {\n        console.error(\"Failed to parse error response:\", parseErr);\n      }\n\n      return new Response(JSON.stringify({ error: errorMessage }), {\n        status: response.status,\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n    const audioBuffer = await response.arrayBuffer();\n\n    return new Response(audioBuffer, {\n      headers: {\n        \"Content-Type\": \"audio/mpeg\",\n        \"Content-Disposition\": 'inline; filename=\"speech.mp3\"',\n      },\n    });\n  } catch (err) {\n    console.error(\"Server error:\", err);\n    return new Response(JSON.stringify({ error: \"Server error\" }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAC3B,eAAe,KAAK,GAAG;IAC5B,MAAM,qBAAqB,QAAQ,GAAG,CAAC,kBAAkB;IACzD,MAAM,WAAW,QAAQ,GAAG,CAAC,mBAAmB,IAAI;IACpD,MAAM,MAAM,CAAC,4CAA4C,EAAE,UAAU;IAErE,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/B,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBACP,QAAQ;gBACR,cAAc;gBACd,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA,UAAU;YACZ;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,IAAI,eAAe;YACnB,IAAI;gBACF,MAAM,UAAU,MAAM,SAAS,IAAI;gBACnC,eAAe,SAAS,OAAO,WAAW,SAAS,WAAW;YAChE,EAAE,OAAO,UAAU;gBACjB,QAAQ,KAAK,CAAC,mCAAmC;YACnD;YAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAa,IAAI;gBAC3D,QAAQ,SAAS,MAAM;gBACvB,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,MAAM,cAAc,MAAM,SAAS,WAAW;QAE9C,OAAO,IAAI,SAAS,aAAa;YAC/B,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB;YACzB;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAe,IAAI;YAC7D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}